% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/missForest.R
\name{missForest}
\alias{missForest}
\title{Imputes a dataframe and returns imputation models to be used on new observations}
\usage{
missForest(
  xmis,
  maxiter = 10,
  OOB_weights = NULL,
  decreasing = FALSE,
  force = FALSE,
  initialization = "median/mode",
  x_init = NULL,
  class.weights = NULL,
  return_integer_as_integer = FALSE,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{xmis}{dataframe containing missing values}

\item{maxiter}{maximum number of iterations}

\item{OOB_weights}{vector of weights for each variable in the convergence criteria.
By default the weights are set to the proportion of missing values on each variable.}

\item{decreasing}{(boolean) if TRUE the order in which the variables are imputed is by decreasing amount of missing values
(the variable with highest amount of missing values will be imputed first). If FALSE the variable with lowest amount of missing values will be imputed first.}

\item{force}{TODO: this is used by me for comparison tests; will be removed at the end}

\item{initialization}{initialization method before running RF models; supported: mean/mode, median/mode and custom}

\item{x_init}{if \code{initialization = custom}; a complete dataframe to be used as initialization (see vignette for example)}

\item{class.weights}{a list of size \code{ncol(xmis)} containing \code{class.weights} parameter to be passed to ranger.
The order of the list needs to respect the order of the columns. Only list elements corresponding to the positions of factor variables
will be used as arguments for ranger.}

\item{return_integer_as_integer}{Internally, integer columns are treated as double (double precision floating point numbers).
If TRUE, the imputations will be rounded to closest integer and returned as integer (This might be desirable for count variables).
If FALSE, integer columns will be returned as double (This might be desirable, for example, for patient age imputation).
Default is FALSE. The same behaviour will be applied to new observations when using missForestPredict.}

\item{verbose}{(boolean) if TRUE then missForest returns error estimates and runtime}

\item{...}{other arguments passed to ranger function (some arguments that are specific to each variable type are not supported)}
}
\value{
Object of class \code{missForest} with elements
    \item{\code{ximp}}{dataframe with imputed values}
    \item{\code{init}}{x_init if custom initalization is used; otherwise list of mean/mode or median/mode for each variable}
    \item{\code{initialization}}{value of initialization parameter}
    \item{\code{impute_sequence}}{vector variable names in the order in which imputation has been run}
    \item{\code{maxiter}}{maxiter parameter as passed to the function}
    \item{\code{models}}{list of random forest models for each iteration}
    \item{\code{return_integer_as_integer}}{Parameter return_integer_as_integer as passed to the function}
    \item{\code{integer_columns}}{list of columns of integer type in the data}
    \item{\code{err_MSE}}{dataframe with MSE (mean square error) values for each iteration and each variable}
    \item{\code{err_NMSE}}{dataframe with NMSE (normalized mean square error) values for each iteration and each variable}
}
\description{
Imputes a dataframe and returns imputation models to be used on new observations.
Models are built for each variable in the dataframe (even if there are no missing values).
}
\examples{
data(iris)
iris_mis <- produce_NA(iris, proportion = 0.1)
imputation_object <- missForest(iris_mis)
iris_imp <- imputation_object$ximp
}
